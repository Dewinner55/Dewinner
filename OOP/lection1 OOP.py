#############    ООП: Введение    #############

'''
Объектно-ориентированное программирование основано на парадигме императивного программирования, которая использует операторы для изменения состояния программы. Основное внимание уделяется описанию того, как должна работать программа. Примерами императивных языков программирования являются C, C ++, Java, Go, Ruby и Python. Это противоречит декларативному программированию, в котором основное внимание уделяется тому, что должна выполнять компьютерная программа, без указания как. Примерами являются языки запросов к базе данных, такие как SQL и XQuery, где только компьютер сообщает, какие данные откуда запрашивать, а теперь как это сделать.

ООП использует концепцию объектов и классов. Класс можно рассматривать как «чертеж» для объектов. Они могут иметь свои собственные атрибуты (характеристики, которыми они обладают) и методы (действия, которые они выполняют).

Примером класса является класс Dog. Не думайте об этом как о конкретной собаке или о своей собственной собаке. Мы описываем, что собака вообще может делать. Собаки обычно имеют name и age - это атрибуты экземпляра. Собаки могут также лаять (bark) - это метод.

Когда вы говорите о конкретной собаке, это у вас будет объект в программировании: объект является экземпляром класса. Это основной принцип, на котором основано объектно-ориентированное программирование. Так, например, моя собака Ак-Тош принадлежит к классу Dog. Его атрибутами будут name = 'Ak-Tosh'и age = '2'. У другой собаки будут другие атрибуты.

Как создать класс.
Чтобы определить класс в Python, вы можете использовать ключевое слово class, за которым следует имя класса и двоеточие. Внутри класса метод __init__ должен быть определен с def. Это инициализатор, который вы позже сможете использовать для создания экземпляров класса. Это похоже на конструктор в Java. Ему требуется один обязательный параметр: self, который относится к самому объекту. Внутри метода на данный момент используется ключевое слово pass, потому что Python ожидает, что вы что-то там напечатаете.
'''

# class Dog:

#     def __init__(self):
#         pass

'''
Таким образом у вас есть класс Dog, но еще нет объекта. Давайте создадим один!

Создание объектов.
Чтобы создать экземпляр от класса, введите имя класса, а затем две скобки. Вы можете присвоить это переменной, чтобы в дальнейшем отслеживать объект.
'''

# ak_tosh = Dog()
# print(ak_tosh)
# # <__main__.Dog object at 0x111f47278>

'''
Добавление атрибутов в класс.
После печати ak_tosh становится ясно, что этот объект - собака. Но вы еще не добавили никаких атрибутов. Давайте дадим Dog классу имя и возраст, переписав его:
'''

# class Dog:

#     def __init__(self, name, age):
#         self.name = name
#         self.age = age

'''
Вы можете видеть, что функция теперь принимает два аргумента после self: name и age. Затем они назначаются self.name и self.age соответственно. Теперь вы можете создать новый объект ak_tosh с именем и возрастом:
'''

# ak_tosh = Dog("Ak-Tosh", 2)

'''
Чтобы получить доступ к атрибутам объекта в Python, вы можете использовать точечную запись. Это делается путем ввода имени объекта, затем точки и имени атрибута.
'''

# print(ak_tosh.name)
# print(ak_tosh.age)
# # Ak-Tosh
# # 2
